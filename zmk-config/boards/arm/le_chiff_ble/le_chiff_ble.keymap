/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
   continue-list = <LSHIFT UNDERSCORE MINUS BSPC>; 
};

#define BASE   0
#define NUMPAD 1
#define NAV_APP 2

#define LOCKED 3

/ {

    macros {
    
        lambda_arrow: lambda_arrow {
            label = "lambda_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp MINUS &kp GREATER_THAN>
            ;
        };
        
    };

    //   ╔═════════════════════════════╗    ╔═════════════════════════════╗
    //   ║  0  |  1  |  2  |  3  |  4  ║    ║  5  |  6  |  7  |  8  |  9  ║
    //   ║ 10  | 11  | 12  | 13  | 14  ║    ║ 15  | 16  | 17  | 18  | 19  ║
    //   ║ 20  | 21  | 22  | 23  | 24  ║    ║ 25  | 26  | 27  | 28  | 39  ║
    //   ╚═════════════╗  30   |  31   ║    ║  32   |  33   ╔═════════════╝
    //                 ╚═══════════════╝    ╚═══════════════╝
    
    combos {
        compatible = "zmk,combos"; 

        tog_locked {
            timeout-ms = <50>;
            key-positions = <30 31 32 33>;
	    layers = <BASE LOCKED>;
            bindings = <&tog LOCKED>;
        };
	
        tog_app_nav {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&tog NAV_APP>;
        };	

        bootloader {
            timeout-ms = <50>;
            key-positions = <0 1 8 9>;
            bindings = <&bootloader>;
        };

        tog_numpad {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&tog NUMPAD>;
        };

        left_shift {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&sk LSHIFT>;
        };

        right_shift {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&sk LSHIFT>;
        };
 
        combo_lPar {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LPAR>;
        };

        combo_lBrace {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LEFT_BRACE>;
        };

        combo_arrow {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&lambda_arrow>;
        };

        combo_rBrace {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RIGHT_BRACE>;
        };
	
        combo_rPar {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp RPAR>;
        };

        combo_del {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp DEL>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
	
	combo_esc {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp ESC>;
        };
	
        combo_enter {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RET>;
        };
 
        combo_ctrl_backspace {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&kp LC(BSPC)>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
        };
	
	combo_caps_word {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };
	
    };

    behaviors {        
		hm_shift: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping_term_ms = <125>;
			quick_tap_ms = <200>;
			global-quick-tap;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		
		hm_gui: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping_term_ms = <175>;
			quick_tap_ms = <200>;
			global-quick-tap;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		
		gqt: global-quick-tap {
		    compatible = "zmk,behavior-hold-tap";
		    label = "GLOBAL_QUICK_TAP";
		    #binding-cells = <2>;
		    flavor = "tap-preferred";
		    tapping-term-ms = <175>;
		    quick-tap-ms = <125>;
		    global-quick-tap;
		    retro-tap;
		    bindings = <&kp>, <&kp>;
		};
		
		morph_tab: morph_tab {
		    compatible = "zmk,behavior-mod-morph";
		    label = "MOD_MORPH";
		    #binding-cells = <0>;
		    bindings = <&lt NAV_LAYER SLASH>, <&kp TAB>;
		    mods = <(MOD_LGUI|MOD_LCTL|MOD_LALT)>;
		};
		
    };
    
    keymap {
        compatible = "zmk,keymap";

        BASE {
            label = "Base";
            bindings = <
                &kp Q           &kp F        &kp C         &kp K               &kp X             &kp MINUS  &kp W                &kp O         &kp U        &kp Z
                &hm_gui LGUI R  &gqt LALT S  &gqt LCTRL T  &hm_shift LSHIFT H  &kp D             &kp V      &hm_shift LSHIFT N   &gqt LCTRL A  &gqt LALT I  &hm_gui LGUI L 
                &kp Y           &kp B        &kp G         &kp P               &kp COMMA         &kp SLASH  &kp M                &kp DOT       &kp J        &kp SEMI
                              &morph_tab  &lt NAV_LAYER SPACE        &lt NUM_UML_LAYER E  &lt SYM_LAYER LC(BSPC)  
            >;
        };
	
       NAV_LAYER {
          bindings = <
  &none  &none  &none  &none  &none      &none    &none     &none   &none      &none
  &none  &none  &none  &none  &none      &kp LEFT &kp DOWN  &kp UP  &kp RIGHT  &none
  &none  &none  &none  &none  &none      &none    &none     &none   &none      &none
                        &none &none      &none  &kp LSHFT
                        >;
                };
/*
   NUMBER LAYER
  ╭────────────────────╮ ╭────────────────────╮
  │  *   9   8   7   | │ │ __  __   ö   ü  __ │
  │  &   3   2   1   + │ │ __  __   ä  __   ß │
  │  $   6   5   4   - │ │ __  __  __  __  __ │
  ╰───────────╮  _   0 │ │        ╭───────────╯
              ╰────────╯ ╰────────╯            
*/
       NUM_UML_LAYER {
          bindings = <
  &kp STAR  &kp N9  &kp N8  &kp N7  &kp PIPE2          &none  &none  &kp RA(P)  &kp RA(Y)  &none
  &kp AMPS  &kp N3  &kp N2  &kp N1  &kp PLUS      &none  &none  &kp RA(Q)  &none     &kp RA(S)
  &kp DOLLAR &kp N6  &kp N5  &kp N4  &kp MINUS          &none  &none  &none     &none      &none
               &kp UNDER &kp N0          &none &none
                        >;
                };

/*               SYMBOL LAYER 

  ╭────────────────────╮ ╭────────────────────╮
  │  {   (   <   $   ~ │ │ __  __  __  __  __ │
  │  €   &   %   "   : │ │ __  __  __  __  __ │
  │  >   !   @   #   | │ │ __  __  __  __  __ │
  ╰───────────╮  }   ) │ │ __  __ ╭───────────╯
              ╰────────╯ ╰────────╯            
*/
       SYM_LAYER {
          bindings = <
  &kp deLEFT_BRACE    &kp deLEFT_PARENTHESIS  &kp deLESS_THAN  &kp deDOLLAR  &kp deTILDE        &none  &none  &none  &none  &none
  &kp deLESS_THAN     &kp deAMPERSAND         &kp dePERCENT    &kp deDQT     &kp deCOLON        &none  &none  &none  &none  &none
  &kp deGREATER_THAN  &kp deEXCLAMATION       &kp deAT_SIGN    &kp deHASH    &kp deBACKSLASH    &none  &none  &none  &none  &none
                                          &kp deRIGHT_BRACE &kp deRIGHT_PARENTHESIS             &none &none
                        >;
                };	

        NUMPAD {
            label = "Numpad";
            bindings = <
                &none  &kp N9  &kp N8  &kp N7  &kp BSPC                &none &none &none &none &none  
                &kp N0  &kp N3  &kp N2  &kp N1  &kp RET                &none &none &none &none &none     
                &none  &kp N6  &kp N5  &kp N4  &kp COMMA               &none &none &none &none &none    
                               &none  &to BASE            &kp E  &reset  
            >;
        };

        NAV_APP {
            label = "Nav App";
            bindings = <
                &none  &none  &none            &none        &none                &none &none &none &none &none  
                &none  &none  &kp LA(LS(ESC))  &kp LA(ESC)  &none                &none &none &none &none &none   
                &none  &none  &none            &none        &none                &none &none &none &none &none    
                               &none  &to BASE            &none  &none  
            >;
        };

        LOCKED {
            label = "LOCKED";
            bindings = <
                &none  &none  &none  &none  &none                &none &none &none &none &none  
                &none  &none  &none  &none  &none                &none &none &none &none &none     
                &none  &none  &none  &none  &none               &none &none &none &none &none    
                               &none  &none            &none  &none  
            >;
        };

    };
};
