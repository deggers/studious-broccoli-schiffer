/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
   continue-list = <LSHIFT UNDERSCORE MINUS BSPC>; 
};

#define BASE   0
#define NUMPAD 1

#define LOCKED 2

/ {

    macros {
    
        lambda_arrow: lambda_arrow {
            label = "lambda_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp MINUS &kp GREATER_THAN>
            ;
        };
        
    };

    //   ╔═════════════════════════════╗    ╔═════════════════════════════╗
    //   ║  0  |  1  |  2  |  3  |  4  ║    ║  5  |  6  |  7  |  8  |  9  ║
    //   ║ 10  | 11  | 12  | 13  | 14  ║    ║ 15  | 16  | 17  | 18  | 19  ║
    //   ║ 20  | 21  | 22  | 23  | 24  ║    ║ 25  | 26  | 27  | 28  | 39  ║
    //   ╚═════════════╗  30   |  31   ║    ║  32   |  33   ╔═════════════╝
    //                 ╚═══════════════╝    ╚═══════════════╝
    
    combos {
        compatible = "zmk,combos"; 

        tog_locked {
            timeout-ms = <50>;
            key-positions = <30 31 32 33>;
            bindings = <&tog LOCKED>;
        };

        bootloader {
            timeout-ms = <50>;
            key-positions = <0 1 8 9>;
            bindings = <&bootloader>;
        };

        tog_numpad {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&tog NUMPAD>;
        };

        left_shift {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&sk LSHIFT>;
        };
	
	combo_equals {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp EQUAL>;
        };

        right_shift {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&sk LSHIFT>;
        };
 
        combo_lPar {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LPAR>;
        };

        combo_lBrace {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LEFT_BRACE>;
        };

        combo_arrow {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&lambda_arrow>;
        };

        combo_rBrace {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RIGHT_BRACE>;
        };
	
        combo_rPar {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp RPAR>;
        };

        combo_del {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp DEL>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
	
	combo_esc {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp ESC>;
        };
	
	
 	combo_grave {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp GRAVE>;
        };
 
        combo_enter {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RET>;
        };
 
        combo_ctrl_backspace {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&kp LC(BSPC)>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
        };
	
	combo_caps_word {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };	

        combo_cut {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp K_CUT>;
        };

        combo_copy {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp K_COPY>;
        };
	
        combo_paste {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp K_PASTE>;
        };
	
    };

    behaviors {        
		hrm_shift: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping_term_ms = <125>;
			quick_tap_ms = <200>;
			global-quick-tap;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
    };
    
    keymap {
        compatible = "zmk,keymap";

        BASE {
            label = "Base";
            bindings = <
                &kp Q  &kp F  &kp C  &kp K         &kp X                &kp SPC  &kp W                &kp O    &kp U  &kp Z
                &kp R  &kp S  &kp T  &hrm_shift LSHIFT H  &kp D         &kp V    &hrm_shift LSHIFT N  &kp A    &kp I  &kp L
                &kp Y  &kp B  &kp G  &kp P         &kp COMMA            &kp SPC  &kp M                &kp DOT  &kp J  &kp SEMI
                               &none  &kp SPACE                   &kp E  &none  
            >;
        };

        NUMPAD {
            label = "Numpad";
            bindings = <
                &none  &kp N9  &kp N8  &kp N7  &kp BSPC                &none &none &none &none &none  
                &kp N0  &kp N3  &kp N2  &kp N1  &kp RET                &none &none &none &none &none     
                &none  &kp N6  &kp N5  &kp N4  &kp COMMA               &none &none &none &none &none    
                               &none  &to BASE            &kp E  &reset  
            >;
        };


        LOCKED {
            label = "Numpad";
            bindings = <
                &none  &none  &none  &none  &none                &none &none &none &none &none  
                &none  &none  &none  &none  &none                &none &none &none &none &none     
                &none  &none  &none  &none  &none               &none &none &none &none &none    
                               &none  &none            &none  &none  
            >;
        };

    };
};
